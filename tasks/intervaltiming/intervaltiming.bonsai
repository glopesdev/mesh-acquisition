<?xml version="1.0" encoding="utf-8"?>
<WorkflowBuilder Version="2.3.0-alpha1">
  <Workflow xmlns:q2="clr-namespace:Bonsai.ChampalimaudHardware.Mesh;assembly=Bonsai.ChampalimaudHardware" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:q3="clr-namespace:Bonsai.Dsp;assembly=Bonsai.Dsp" xmlns:q7="clr-namespace:Bonsai.IO;assembly=Bonsai.System" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:q5="clr-namespace:Bonsai.Scripting;assembly=Bonsai.Scripting" xmlns:q4="clr-namespace:Bonsai.Audio;assembly=Bonsai.Audio" xmlns:q6="clr-namespace:Bonsai.Windows.Input;assembly=Bonsai.Windows.Input" xmlns:q1="clr-namespace:Bonsai.Shaders;assembly=Bonsai.Shaders" xmlns="https://horizongir.org/bonsai">
    <Nodes>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:Timer">
          <q1:DueTime>PT0S</q1:DueTime>
        </Combinator>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>Delay</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="ReplaySubject">
              <Name>Interval</Name>
              <BufferSize>1</BufferSize>
            </Expression>
            <Expression xsi:type="ExternalizedTimeSpanOfTimer">
              <MemberName>DueTime</MemberName>
              <Name>DueTime</Name>
              <Value>PT0S</Value>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timer">
                <DueTime>PT0.968S</DueTime>
                <Period>PT0S</Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="SelectMany">
              <Name>TrialBaseline</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Interval</Name>
                  </Expression>
                  <Expression xsi:type="SubscribeSubject">
                    <Name>Clock</Name>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="Zip" />
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>1</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>3</To>
                    <Label>Source2</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>0</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item1</Selector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q1:UpdateFrame" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q2:Tuna">
          <q2:Port>51002</q2:Port>
          <q2:TunaPort>51003</q2:TunaPort>
        </Combinator>
      </Expression>
      <Expression xsi:type="Condition">
        <Name>MasterTuna</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Id</Selector>
            </Expression>
            <Expression xsi:type="Equal">
              <Operand xsi:type="IntProperty">
                <Value>1</Value>
              </Operand>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfInt32EqualBuilder">
              <MemberName>Value</MemberName>
              <Name>Value</Name>
              <Value>1</Value>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="ReplaySubject">
        <Name>Clock</Name>
        <BufferSize>1</BufferSize>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Set</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Ready</Name>
      </Expression>
      <Expression xsi:type="WindowWorkflow">
        <Name>ReadyTone</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>4410</q3:BufferLength>
                <q3:Frequency>500</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>100</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>5000</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>0</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="DelaySubscription">
                <DueTime>PT0.1S</DueTime>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>882</q3:BufferLength>
                <q3:Frequency>50</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>50</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q4:AudioPlayback">
          <q4:Frequency>44100</q4:Frequency>
        </Combinator>
      </Expression>
      <Expression xsi:type="BehaviorSubject">
        <Name>Set</Name>
      </Expression>
      <Expression xsi:type="WindowWorkflow">
        <Name>SetTone</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>4410</q3:BufferLength>
                <q3:Frequency>500</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>100</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>5000</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>0</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>882</q3:BufferLength>
                <q3:Frequency>50</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>50</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="DelaySubscription">
                <DueTime>PT0.1S</DueTime>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>6</To>
              <Label>Source2</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Merge" />
      </Expression>
      <Expression xsi:type="Sink">
        <Name>DrawCumulative</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:UpdateVertexBuffer">
                <q1:MeshName>Cumulative</q1:MeshName>
                <q1:DrawMode>LineStrip</q1:DrawMode>
                <q1:Usage>DynamicDraw</q1:Usage>
                <q1:VertexAttributes>
                  <q1:VertexAttributeMapping>
                    <q1:Size>2</q1:Size>
                    <q1:Normalized>false</q1:Normalized>
                    <q1:Type>Float</q1:Type>
                  </q1:VertexAttributeMapping>
                </q1:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Sink">
              <Name>UpdateUniform</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:UpdateUniform">
                      <q1:UniformName>buffer_size</q1:UniformName>
                      <q1:ShaderName>RenderCumulative</q1:ShaderName>
                    </Combinator>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="q5:PythonTransform">
              <q5:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
from System import Tuple

vertx = None
buffer = None
buffersize = 10
yscale = 0.0001 / 500.0
yshift = -1

@returns(Tuple[int,Mat])
def process(value):
  global buffer, vertx
  if buffer is None:
    buffer = Mat(value.Rows, buffersize, value.Depth, 1)
    vertx = Mat(buffer.Rows * buffersize, 1, Depth.F32, 1)
    CV.Range(vertx,-1,1)
    buffer.SetZero()
  else:
    endrect = buffer.GetSubRect(Rect(1,0,buffersize-1,value.Rows))
    startrect = buffer.GetSubRect(Rect(0,0,buffersize-1,value.Rows))
    CV.Copy(endrect,startrect)
  CV.Copy(value,buffer.GetCol(buffersize-1))

  output = Mat(vertx.Rows,2,Depth.F32,1)
  ydata = buffer.Reshape(0, 1)
  CV.Copy(vertx,output.GetCol(0))
  ycol = output.GetCol(1)
  CV.Transpose(ydata,ycol)
  CV.ConvertScale(ycol,ycol,yscale,yshift)
  return Tuple.Create(buffersize,output)

def unload():
  global buffer, vertx
  buffer = None
  vertx = None</q5:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="SubscribeWhen" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q6:KeyDown">
          <q6:Filter>None</q6:Filter>
        </Combinator>
      </Expression>
      <Expression xsi:type="GroupBy">
        <KeySelector>Source.Id</KeySelector>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Merge" />
            </Expression>
            <Expression xsi:type="Condition">
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Button</Selector>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
            <Expression xsi:type="DistinctUntilChangedBy">
              <KeySelector>Source.Button</KeySelector>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="PublishSubject">
        <Name>TunaPresses</Name>
      </Expression>
      <Expression xsi:type="Sink">
        <Name>LogTuna</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Message</Selector>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfStringMatrixWriter">
              <MemberName>Path</MemberName>
              <Name>Path</Name>
              <Value>tuna.bin</Value>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:MatrixWriter">
                <q3:Path>tuna.bin</q3:Path>
                <q3:Suffix>Timestamp</q3:Suffix>
                <q3:Overwrite>false</q3:Overwrite>
                <q3:Layout>ColumnMajor</q3:Layout>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:Submatrix">
                <q3:StartRow>0</q3:StartRow>
                <q3:EndRow xsi:nil="true" />
                <q3:StartCol>0</q3:StartCol>
                <q3:EndCol>80</q3:EndCol>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertFromArray">
                <q3:Size>
                  <q3:Width>0</q3:Width>
                  <q3:Height>0</q3:Height>
                </q3:Size>
                <q3:Depth>U8</q3:Depth>
                <q3:Channels>1</q3:Channels>
              </Combinator>
            </Expression>
            <Expression xsi:type="ExternalizedPropertyOfPathSuffixMatrixWriter">
              <MemberName>Suffix</MemberName>
              <Name>Suffix</Name>
              <Value>Timestamp</Value>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>4</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>4</To>
              <Label>Source3</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="BehaviorSubject">
        <Name>Ready</Name>
      </Expression>
      <Expression xsi:type="Accumulate" />
      <Expression xsi:type="SelectMany">
        <Name>Go</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Sample" />
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="CombineLatest" />
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>TunaPresses</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Take">
                <Count>1</Count>
              </Combinator>
            </Expression>
            <Expression xsi:type="DistinctBy">
              <KeySelector>Source.Id</KeySelector>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timer">
                <DueTime>PT3S</DueTime>
                <Period>PT0S</Period>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="TakeUntil" />
            </Expression>
            <Expression xsi:type="q5:PythonTransform">
              <q5:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
from System import Math

freq = 100.0
ids = [2,3,4,5,6,8,9,11,12,13,15,16,17]
channelmap = dict(((x,i) for i,x in enumerate(ids)))
maxerror = Math.Pow(3.0 * freq, 2)
errors = None

def load():
  global errors
  errors = Mat(len(channelmap), 1, Depth.F32, 1)
  errors.Set(Scalar.Real(maxerror))

@returns(Mat)
def process(value):
  interval = value.Item1.Item1
  clock = value.Item1.Item2
  bpress = value.Item2
  seconds = (bpress.Second - clock.Second)
  deltaT = (seconds * freq + bpress.Counter) - clock.Counter
  deltaI = interval.TotalSeconds * freq
  diff = deltaT - deltaI
  errors.SetReal(channelmap[bpress.Id], diff * diff)
  return errors

def unload():
  global errors
  errors = None</q5:Script>
            </Expression>
            <Expression xsi:type="q5:PythonTransform">
              <q5:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
from System import Math

freq = 100.0
ids = [2,3,4,5,6,8,9,11,12,13,15,16,17]
maxerror = Math.Pow(3.0 * freq, 2)

@returns(Mat)
def process(value):
  if value is None:
    errors = Mat(len(ids), 1, Depth.F32, 1)
    errors.Set(Scalar.Real(maxerror))
    return errors
  return value
</q5:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="LastOrDefault" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>9</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>6</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>2</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>8</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>8</From>
              <To>11</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>9</From>
              <To>8</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>10</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>11</From>
              <To>10</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="RepeatCount">
          <Count>500</Count>
        </Combinator>
      </Expression>
      <Expression xsi:type="BehaviorSubject">
        <Name>Errors</Name>
      </Expression>
      <Expression xsi:type="q7:CsvWriter">
        <q7:FileName>trial_interval.csv</q7:FileName>
        <q7:Append>false</q7:Append>
        <q7:Overwrite>false</q7:Overwrite>
        <q7:Suffix>Timestamp</q7:Suffix>
        <q7:IncludeHeader>false</q7:IncludeHeader>
        <q7:Selector>Source.Item1.Item1,Source.Item1.Item2.Second,Source.Item1.Item2.Counter</q7:Selector>
      </Expression>
      <Expression xsi:type="MemberSelector">
        <Selector>Source.Item2</Selector>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="q3:MatrixWriter">
          <q3:Path>trial_error.bin</q3:Path>
          <q3:Suffix>Timestamp</q3:Suffix>
          <q3:Overwrite>false</q3:Overwrite>
          <q3:Layout>ColumnMajor</q3:Layout>
        </Combinator>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Errors</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Ready</Name>
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Zip" />
      </Expression>
      <Expression xsi:type="Combinator">
        <Combinator xsi:type="Switch" />
      </Expression>
      <Expression xsi:type="Sink">
        <Name>DrawCurrent</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="q5:PythonTransform">
              <q5:Script>import clr
clr.AddReference("OpenCV.Net")
from OpenCV.Net import *
from System import Tuple

vertx = None
buffer = None
buffersize = 10
yscale = 0.0001
yshift = 0

@returns(Tuple[int,Mat])
def process(value):
  global buffer, vertx
  if buffer is None:
    buffer = Mat(value.Rows, buffersize, value.Depth, 1)
    vertx = Mat(buffer.Rows * buffersize, 1, Depth.F32, 1)
    CV.Range(vertx,-1,1)
    buffer.SetZero()
  else:
    endrect = buffer.GetSubRect(Rect(1,0,buffersize-1,value.Rows))
    startrect = buffer.GetSubRect(Rect(0,0,buffersize-1,value.Rows))
    CV.Copy(endrect,startrect)
  CV.Copy(value,buffer.GetCol(buffersize-1))

  output = Mat(vertx.Rows,2,Depth.F32,1)
  ydata = buffer.Reshape(0, 1)
  CV.Copy(vertx,output.GetCol(0))
  ycol = output.GetCol(1)
  CV.Transpose(ydata,ycol)
  CV.ConvertScale(ycol,ycol,yscale,yshift)
  return Tuple.Create(buffersize,output)

def unload():
  global buffer, vertx
  buffer = None
  vertx = None</q5:Script>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q1:UpdateVertexBuffer">
                <q1:MeshName>Current</q1:MeshName>
                <q1:DrawMode>LineStrip</q1:DrawMode>
                <q1:Usage>DynamicDraw</q1:Usage>
                <q1:VertexAttributes>
                  <q1:VertexAttributeMapping>
                    <q1:Size>2</q1:Size>
                    <q1:Normalized>false</q1:Normalized>
                    <q1:Type>Float</q1:Type>
                  </q1:VertexAttributeMapping>
                </q1:VertexAttributes>
              </Combinator>
            </Expression>
            <Expression xsi:type="MemberSelector">
              <Selector>Source.Item2</Selector>
            </Expression>
            <Expression xsi:type="Sink">
              <Name>UpdateUniform</Name>
              <Workflow>
                <Nodes>
                  <Expression xsi:type="WorkflowInput">
                    <Name>Source1</Name>
                  </Expression>
                  <Expression xsi:type="WorkflowOutput" />
                  <Expression xsi:type="MemberSelector">
                    <Selector>Source.Item1</Selector>
                  </Expression>
                  <Expression xsi:type="Combinator">
                    <Combinator xsi:type="q1:UpdateUniform">
                      <q1:UniformName>buffer_size</q1:UniformName>
                      <q1:ShaderName>RenderCurrent</q1:ShaderName>
                    </Combinator>
                  </Expression>
                </Nodes>
                <Edges>
                  <Edge>
                    <From>0</From>
                    <To>2</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>2</From>
                    <To>3</To>
                    <Label>Source1</Label>
                  </Edge>
                  <Edge>
                    <From>3</From>
                    <To>1</To>
                    <Label>Source1</Label>
                  </Edge>
                </Edges>
              </Workflow>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="BehaviorSubject">
        <Name>Warning</Name>
      </Expression>
      <Expression xsi:type="SubscribeSubject">
        <Name>Warning</Name>
      </Expression>
      <Expression xsi:type="WindowWorkflow">
        <Name>WarningTone</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>4410</q3:BufferLength>
                <q3:Frequency>250</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>100</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>5000</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:ConvertScale">
                <q3:Depth xsi:nil="true" />
                <q3:Scale>0</q3:Scale>
                <q3:Shift>0</q3:Shift>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="DelaySubscription">
                <DueTime>PT0.1S</DueTime>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="q3:FunctionGenerator">
                <q3:BufferLength>882</q3:BufferLength>
                <q3:Frequency>50</q3:Frequency>
                <q3:Waveform>Sine</q3:Waveform>
                <q3:PlaybackRate>50</q3:PlaybackRate>
              </Combinator>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Concat" />
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>7</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>5</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>5</From>
              <To>7</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>6</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>7</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="q5:PythonTransform">
        <q5:Script>from System import Random, Math, TimeSpan

mean = 0.55
stimduration = 0.2
minval = 0.25 + stimduration
maxval = 0.85 + stimduration
generator = Random()

def exponential(generator, l):
  u = generator.NextDouble()
  return Math.Log(1 - u) * -l

@returns(TimeSpan)
def process(value):
  interval = exponential(generator, mean)
  interval = max(minval, min(interval, maxval))
  return TimeSpan.FromSeconds(interval)
</q5:Script>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>WarningDelay</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="ExternalizedTimeSpanOfTimer">
              <MemberName>DueTime</MemberName>
              <Name>DueTime</Name>
              <Value>PT0S</Value>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Timer">
                <DueTime>PT0.95S</DueTime>
                <Period>PT0S</Period>
              </Combinator>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>0</From>
              <To>2</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>1</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
      <Expression xsi:type="SelectMany">
        <Name>StartTrial</Name>
        <Workflow>
          <Nodes>
            <Expression xsi:type="WorkflowOutput" />
            <Expression xsi:type="WorkflowInput">
              <Name>Source1</Name>
            </Expression>
            <Expression xsi:type="SubscribeSubject">
              <Name>Clock</Name>
            </Expression>
            <Expression xsi:type="Combinator">
              <Combinator xsi:type="Zip" />
            </Expression>
            <Expression xsi:type="q5:PythonTransform">
              <q5:Script>from System import Random, Math, TimeSpan

short = [0.494,0.847]
medium = [0.671,1.023]
longest = [0.847,1.200]
active = longest

stimduration = 0.1
generator = Random()

def uniform(generator, rmin, rmax):
  return generator.NextDouble() * (rmax - rmin) + rmin

@returns(TimeSpan)
def process(value):
  interval = uniform(generator, active[0] + stimduration, active[1] + stimduration)
  return TimeSpan.FromSeconds(interval)
</q5:Script>
            </Expression>
          </Nodes>
          <Edges>
            <Edge>
              <From>1</From>
              <To>4</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>2</From>
              <To>3</To>
              <Label>Source2</Label>
            </Edge>
            <Edge>
              <From>3</From>
              <To>0</To>
              <Label>Source1</Label>
            </Edge>
            <Edge>
              <From>4</From>
              <To>3</To>
              <Label>Source1</Label>
            </Edge>
          </Edges>
        </Workflow>
      </Expression>
    </Nodes>
    <Edges>
      <Edge>
        <From>0</From>
        <To>33</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>1</From>
        <To>10</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>3</From>
        <To>19</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>4</From>
        <To>5</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>6</From>
        <To>11</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>7</From>
        <To>8</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>8</From>
        <To>12</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>10</From>
        <To>22</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>11</From>
        <To>12</To>
        <Label>Source3</Label>
      </Edge>
      <Edge>
        <From>12</From>
        <To>31</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>15</From>
        <To>14</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>16</From>
        <To>17</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>17</From>
        <To>18</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>4</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>19</From>
        <To>16</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>20</From>
        <To>1</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>21</From>
        <To>13</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>22</From>
        <To>24</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>23</From>
        <To>14</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>24</From>
        <To>23</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>25</From>
        <To>26</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>26</From>
        <To>27</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>27</From>
        <To>32</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>28</From>
        <To>30</To>
        <Label>Source2</Label>
      </Edge>
      <Edge>
        <From>29</From>
        <To>30</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>30</From>
        <To>25</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>31</From>
        <To>9</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>32</From>
        <To>21</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>33</From>
        <To>36</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>34</From>
        <To>35</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>35</From>
        <To>12</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>36</From>
        <To>37</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>37</From>
        <To>38</To>
        <Label>Source1</Label>
      </Edge>
      <Edge>
        <From>38</From>
        <To>20</To>
        <Label>Source1</Label>
      </Edge>
    </Edges>
  </Workflow>
  <ExtensionTypes>
    <Type>Bonsai.Shaders.Timer, Bonsai.Shaders, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedTimeSpan`1[[Bonsai.Reactive.Timer, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Timer, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Zip, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateFrame, Bonsai.Shaders, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.ChampalimaudHardware.Mesh.Tuna, Bonsai.ChampalimaudHardware, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.EqualBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.IntProperty, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Expressions.EqualBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.FunctionGenerator, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.ConvertScale, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.DelaySubscription, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Concat, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Audio.AudioPlayback, Bonsai.Audio, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Merge, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateVertexBuffer, Bonsai.Shaders, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Shaders.UpdateUniform, Bonsai.Shaders, Version=0.11.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.SinkBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Scripting.PythonTransform, Bonsai.Scripting, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.SubscribeWhen, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Windows.Input.KeyDown, Bonsai.Windows.Input, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.GroupByBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.DistinctUntilChangedByBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[Bonsai.Dsp.MatrixWriter, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.MatrixWriter, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.Submatrix, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Dsp.ConvertFromArray, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Expressions.ExternalizedProperty`2[[Bonsai.IO.PathSuffix, Bonsai.System, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null],[Bonsai.Dsp.MatrixWriter, Bonsai.Dsp, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null]], Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.AccumulateBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Sample, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.CombineLatest, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Take, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.DistinctByBuilder, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.TakeUntil, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.LastOrDefault, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.RepeatCount, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.IO.CsvWriter, Bonsai.System, Version=2.2.0.0, Culture=neutral, PublicKeyToken=null</Type>
    <Type>Bonsai.Reactive.Switch, Bonsai.Core, Version=2.3.0.0, Culture=neutral, PublicKeyToken=null</Type>
  </ExtensionTypes>
</WorkflowBuilder>